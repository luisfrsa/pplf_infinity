#lang racket

;; Este programa resolve um jogo infinity rotacionando seus blocos
;; até que todos se encaixem entre si. O método de resolução utilizado será
;; por meio de busca com retrocesso (backtracking).
;;
;; ** Conceitos **
;; Bloco
;;  Um bloco é uma peça do jogo Infinity. O bloco é representado como um
;;  caractere quando lido ou escrito de um arquivo, e representado como um
;;  número entre 0 e 15 quando processado dentro do programa.
;; Jogo
;;  Um jogo Infinity é um tabuleiro de M linhas e N colunas (tamanho MxN)
;;  preenchidas por blocos. O jogo infinity é dito resolvido quando todos seus
;;  blocos estão conectados. O jogo é representado por uma lista de listas.

;; exporta as funções que podem ser utilizadas em outros arquivos
(provide tamanho
	rotacionar
	encaixa-h?
	encaixa-v?
	seguro?
	resolver
	dec-bin
	bin-dec
	main)

;; lista com as representações dos blocos como caracteres
(define blocos-reps (string->list " ╹╺┗╻┃┏┣╸┛━┻┓┫┳╋"))


;; Tamanho representa o tamanho de um jogo em altura e largura
;;     altura : Número - quantidade de linhas do jogo.
;;    largura : Número - quantidade de colunas do jogo.
(struct tamanho (altura largura) #:transparent)

;;
;; Lista -> Lista
;; --------------
;; Retorna lista de possibilidades de rotações
;; Exemplo: (get-lista-rotacoes (list 0 1 1 0))
;;          > (list 0 1 1 0) (list (list 1 1 0 0) (list  1 0 0 1) )
(define (get-lista-rotacoes lista) resolver) 



;; Decimal -> Lista binária
;; --------------
;; Converte um decimal em uma lista de binário
;; Exemplo: (dec-bin 10)
;;          > '(list 1 0 1 0)
(define (dec-bin numero)
	(define (fill lista)
		(if(< (length lista) 4) (fill (cons 0 lista)) lista)      
		)
	(define (core numero lista)
		(cond
			((zero? numero) (fill lista))
			(else
				(core (quotient numero 2) 
					(cons (if (= 0 (remainder numero 2)) 0 1) lista)))))
	(core numero empty)
	)


;; Lista binária -> Decimal
;; --------------
;; Converte uma lista de binário em um decimal
;; Exemplo: (bin-dec (list 1 0 0 1))
;;          > 10
(define (bin-dec lista)
	(define (core lista num multi)
		(cond
			((empty? lista) num)
			(else
				(core (rest lista) 
					(+ num (* (first lista) multi)) (/ multi 2))
				)
			)
		)
    ;+ (8, 4, 2, 1 ) * o binario
    (core lista 0 8)
    )


;; Lista -> Lista
;; --------------
;; Rotaciona um bloco 90 graus em sentido horário
;; Exemplo: (rotacionar (list 0 1 1 0))
;;          > (list 1 1 0 0)
(define (rotacionar2 lista) 
	(append (rest lista) (list (first lista))))

(define (rotacionar lista) 
	(append (list(last lista)) (drop-right lista 1)))

;; Lista binária -> Lista de listas binárias de roações
;; --------------
;; Converte uma lista binária em uma lista de listas binárias, 
;;sendo essas, suas possíveis rotações
;; Exemplo: (gera-rotacoes (list 1 1 0 0))
;;          > '(list (list 1 1 0 0) (list 1 0 0 1) (list 0 0 1 1) (list 0 1 1 0))

(define (gera-rotacoes lista)
	(define (core lista primeiro return)
		(cond
			[(empty? lista) return]
			[else 
			(if (equal? primeiro lista) 
				return 
				(core (rotacionar lista) 
					(if (empty? primeiro) lista primeiro) 
					(cons (rotacionar lista) return)
					)
				)
			]
			)
		)
	(core lista empty empty)
	)

;; Bloco Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco-e se encaixa horizontalmente à esquerda do bloco-d
;; 3  = '(0 0 X 1)
;; 14 = '(X 1 1 0)
;; o terceiro elemento do bloco-e deve ser o mesmo que o first do bloco d
;; Exemplo: (encaixa-h? '(0 0 1 1) '(1 1 1 0))
;;          > #t
(define (encaixa-h? bloco-e bloco-d) 

	(if (or  (empty? bloco-e) (empty? bloco-d)) 
		#f 
		(equal? (first (rest (rest bloco-e))) (first bloco-d))
		)
	
)
;Função apenas para debug
(define (encaixa-h-debug? bloco-e bloco-d) 
	(display "\n encaixa h ")
	(display bloco-e)
	(display ", ")
	(display (bin-dec bloco-e))
	(display " - ")
	(display bloco-d)
	(display ", ")
	(display (bin-dec bloco-d))
	(display " - Result  ")
	(display (equal? (first (rest (rest bloco-e))) (first bloco-d)))
	(if (or  (empty? bloco-e) (empty? bloco-d)) 
		#f 
		(equal? (first (rest (rest bloco-e))) (first bloco-d))
		)
	
)

;; Bloco Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco-t se encaixa verticalmente acima do bloco-b
;; 14 = '(1 X 1 0)
;; 3  = '(0 0 1 X)
;; o último do bloco-t deve ser o mesmo que o segundo do bloco b
;; Exemplo: (encaixa-v?  '(1 1 1 0) '(0 0 1 1) )
;;          > #t

(define (encaixa-v? bloco-t bloco-b)
	(if (or  (empty? bloco-t) (empty? bloco-b)) 
		#f 
		(equal? (first (rest bloco-t)) (last bloco-b))
		)
)


;Função apenas para teste

(define (encaixa-v-debug? bloco-t bloco-b)
	(display "\n encaixa V ")
	(display bloco-t)
	(display ", ")
	(display (bin-dec bloco-t))
	(display " - ")
	(display bloco-b)
	(display ", ")
	(display (bin-dec bloco-b))
	(display " - Result  ")
	(display (equal? (first (rest bloco-t)) (last bloco-b)))
	(if (or  (empty? bloco-t) (empty? bloco-b)) 
		#f 
		(equal? (first (rest bloco-t)) (last bloco-b))
		)
)


;; Bloco decimal Tamanho -> Lógico
;; -----------------------------
;; Verifica se um bloco esta em conflito com os
;; limites superior, inferior, direito e esquerdo 

(define (seguro-bordas?  bloco index tam )
	(define (seguro-borda-top? bloco index tam)
		(if (<= index (tamanho-largura tam))
			(zero? (last bloco))
			#t
			)
		)
	(define (seguro-borda-bottom? bloco index tam)
		(if (> index (* (tamanho-largura tam) (- (tamanho-altura tam) 1)))
			(zero? (list-ref bloco 1))
			#t
			)
		)
	(define (seguro-borda-dir? bloco index tam)
		(if (zero? (remainder index (tamanho-largura tam)))
			(zero? (list-ref bloco 2))
			#t
			)
		)
	(define (seguro-borda-esq? bloco index tam)
		(if (equal? 1 (remainder index (tamanho-largura tam)))
			(zero? (first bloco))
			#t
			)
		)
	(if (or (empty? bloco) (empty? tam))
		#f
		(and  
			(seguro-borda-top?  bloco index tam)
			(seguro-borda-bottom?  bloco index tam)
			(seguro-borda-dir?  bloco index tam)
			(seguro-borda-esq?  bloco index tam)
		)

	)
)

;Função apenas para teste
(define (seguro-bordas-debug?  bloco index tam)
	(display "\n\n \n bloco ")(display bloco)(display "#")(display (bin-dec bloco))(display " index ")(display index )(display " tam ")(display tam )
	(define (seguro-borda-top? bloco index tam)
		(if (<= index (tamanho-largura tam))
			(zero? (last bloco))
			#t
			)
		)
	(define (seguro-borda-bottom? bloco index tam)
		(if (> index (* (tamanho-largura tam) (- (tamanho-altura tam) 1)))
			(zero? (list-ref bloco 1))
			#t
			)
		)
	(define (seguro-borda-dir? bloco index tam)
		(if (zero? (remainder index (tamanho-largura tam)))
			(zero? (list-ref bloco 2))
			#t
			)
		)
	(define (seguro-borda-esq? bloco index tam)
		(if (equal? 1 (remainder index (tamanho-largura tam)))
			(zero? (first bloco))
			#t
			)
		)
	(if (or (empty? bloco) (empty? tam))
		#f
		(and  
			(seguro-borda-top?  bloco index tam)
			(seguro-borda-bottom?  bloco index tam)
			(seguro-borda-dir?  bloco index tam)
			(seguro-borda-esq?  bloco index tam)
		)

	)
)


;; Bloco List Tamanho -> Lógico
;; -----------------------------
;; Verifica se um bloco é seguro de ser adicionado a uma solução. Ser 
;; seguro significa que, ao ser adicionado à solução, o bloco se 
;; encaixa a todos os blocos adjacentes à posição em que ele seria 
;; inserido. Uma solução é uma lista de blocos que representa a solução 
;; do jogo até o presente momento. Para facilitar a implementação, 
;; considere que a solução será construída em ordem invertida. Assim, a 
;; solução '(6 14 12 7 9), referente ao um jogo de tamanho 4x3, 
;; representa a seguinte situação:
;; 
;; [6][14][12]    [┏][┳][┓]
;; [7][ 9][  ] => [┣][┛][ ]
;; [ ][  ][  ]    [ ][ ][ ]
;; [ ][  ][  ]    [ ][ ][ ]
;; 
;; A chamada (seguro? 5 '(6 14 12 7 9) (tamanho 4 3)) deve verificar se 
;; o bloco 5 [┃] é seguro de ser adicionado à solução, isto é, inserido 
;; na posição lin=2, col=3 da situação descrita acima. Observe que para 
;; este exemplo o bloco 5 é seguro, pois ele se encaixa a todos os 
;; blocos adjacentes: ao bloco 9 à esquerda, ao bloco 12 acima e à 
;; borda direita (branco) do tabuleiro. Veja que não houve necessidade 
;; de se verificar o encaixe com o bloco abaixo, já que o mesmo ainda 
;; não existe na solução.
(define (seguro? numero solucao tam) 
	;(display " REMAINDER ")
	;(display (add1(length solucao)))
	;(display "  ")
	;(display (equal? 1 (remainder (add1(length solucao)) (tamanho-largura tam))))
	(and 
		(seguro-bordas? (dec-bin numero) (add1 (length solucao)) tam)

		(if (and (not (empty? solucao)) (> (length solucao)(tamanho-largura tam)))
			(encaixa-v? 
				(dec-bin (list-ref solucao (- (length solucao) (tamanho-largura tam))))
				(dec-bin numero))
			#t
		)
		(if (and (not (empty? solucao)) (not (equal? 1 (remainder (add1(length solucao)) (tamanho-largura tam)))))
			(encaixa-h? 
				(dec-bin (list-ref solucao (sub1 (length solucao))))
				(dec-bin numero))
			#t
		)
		)
)

;Lista de Caracteres -> Lista de Números
;Converte lista de caracteres em lista de números
;Ex: (listachar-listanum (6 14 12)) -> '(┏  ┳  ┓)
(define (listachar-listanum lista-char)
	(foldr (lambda (el construido)
		(cons  (caracter-numero el) construido)
		) empty lista-char
	)
)



;Caractere->Número
;Converte caractere em número
;Ex: (numero-caracter ┓) -> 12
(define (caracter-numero char)
	(define (core lista char count)
		(cond
			((empty? lista) #f)
			(else (if (equal? (first lista) char) 
				count
				(core (rest lista) char (add1 count))
				)
			)

			)
		)
	(core blocos-reps char 0)
	)


;Número->Caractere
;Converte número em caractere
;Ex: (numero-caracter 12) -> ┓
(define (numero-caracter num)
	(cond
		((empty? num) #f)
		(else (list-ref blocos-reps num))
		)
	)

;; Lista bidimensional -> Lista unidimensional
;; Converte lista bidimensional em uma lista unidimensional
;; Exemplo: (listabi-listauni  (list (list 1 2 3) (list 4 5 6))
;;          > (list 1 2 3 4 5 6)
(define (listabi-listauni listabi)
	(foldr 
		(lambda (lista result) 
			(append lista result )
			) empty listabi)
	)
;; Lista de caracteres -> (list qdeLinhas qdeColunas lista de números)
;; Converte a lista de caracteres para lista com qdeLinhas, qdeColunas e lista de numeros
;; Exemplo: (converter-arquivo-numero  (list "┗┃┳┓" "┫┻┣┃" "┃┫┣┣" "┏┫┃┗") )
;;          > (list 4 4(list (3 5 14 12) (13 11 7 5) (5 13 7 7) (6 13 5 3)))
(define (converter-arquivo-numero lista-arquivo)
	(list
		(bilist-unilist (map (lambda (lista) 
			(listachar-listanum (string->list lista)))
		lista-arquivo)
		))
		(tamanho (length lista-arquivo) (string-length (first lista-arquivo)))
	)

;; String -> Jogo
;; Faz a leitura e processa um jogo armazenado em arquivo.
;; Exemplo: (ler-jogo "testes/5.txt")
;;          > '((0 6 6 1) (12 15 15 6) (1 10 10 0) (0 2 1 0))
(define (ler-jogo diretorio)
	(cond 
		((empty? diretorio) #f)
		(else  (converter-arquivo-numero (port->lines (open-input-file diretorio))))
		)
	)
;; Dica: procure pelas funções pré-definidas open-input-file e port->lines


;; Jogo -> void
;; Escreve o jogo na tela codificado em caracteres.
;; Exemplo: (escrever-jogo '((6 10 14 12) (7 14 13 5) (5 7 11 13) (3 11 10 9)))
;;          > ┏━┳┓
;;            ┣┳┫┃
;;            ┃┣┻┫
;;            ┗┻━┛
(define (escrever-jogo lista) 
	(display 
		(foldr 
			(lambda (el result) 
				(string-append  
					(list->string (map numero-caracter el))		
					"\n"	
					result
					)
				)
			"" lista
			)
		)
)
;; Lista do jogo resolvido -> Tabuleiro'
;; '(0  6 12 4          [ ][┏][┓][╻]
;;   6 15 15 9     =>   [┏][╋][╋][┛]
;;   1  5  5 0          [╹][┃][┃][ ]
;;   0  1  1 0)         [ ][╹][╹][ ]
(define (escrever-jogo-resolvido param) 
	(define (core lista break-point count string quebra-linha)
		;(display "\n\n lista: ")
		;(display lista)
		;(display "\n break: ")
		;(display break-point)
		;(display "\n count: ")
		;(display count)
		;(display "\n caracter: ")
		;(display "\n quebra?: ")
		(display string)
		(display quebra-linha)
		(cond 
			((empty? lista) #t) 
			((zero? (remainder count break-point)) (core (rest lista) break-point (add1 count) (numero-caracter(first lista)) "\n"))
			(else (core (rest lista) break-point (add1 count) (numero-caracter(first lista)) ""))
		)
	)
	(core (list-ref param 1) (tamanho-largura (last param)) 1 "\n/*-------------------*/ \n" "")
)


;; (list (list) (list)) -> (list)
;; Converte lista bidimensional em lista unidimensional.
;; Exemplo: (list (list 1 2 3) (list 4 5 6))
;;          > '(1 2 3 4 5 6)
(define (bilist-unilist lista)
  (if (empty? lista)
      empty
      (append (first lista) (bilist-unilist (rest lista)))
    )
 )

;; Jogo -> Jogo || #f
;; Resolve o jogo Infinity e o retorna resolvido. Caso não seja possível
;; resolvê-lo, retorna o valor falso. Por exemplo, se passado o seguinte jogo:
;;
;; '(( 0  6  6 1)         [ ][┏][┏][╹]
;;   (12 15 15 6)    =>   [┓][╋][╋][┏]
;;   ( 1 10 10 0)         [╹][━][━][ ]
;;   ( 0  2  1 0))        [ ][╺][╹][ ]
;;
;; a função deve retornar:
;;
;; '((0  6 12 4)          [ ][┏][┓][╻]
;;   (6 15 15 9)     =>   [┏][╋][╋][┛]
;;   (1  5  5 0)          [╹][┃][┃][ ]
;;   (0  1  1 0))         [ ][╹][╹][ ]
(define (resolver pendentes tamanho)
	(display pendentes)
	(display tamanho)
	(define (rotate-seguro solucao pendentes tamanho list-rotacoes param)
		(display param)
		(cond
			;;caso não haja resolução retorna (list false)
			;((empty? list-rotacoes) (list #f)) 
			((empty? list-rotacoes) #f) 
			;;caso o jogo seja resolvido retorna (list true resolucao tamanho)
			((seguro? (bin-dec (first list-rotacoes)) solucao tamanho)  
				;(if (first (core (if (empty? solucao) (list (bin-dec (first list-rotacoes))) (append solucao (list (bin-dec (first list-rotacoes))))) (drop-right pendentes 1)  tamanho))
				;(if (core (if 
				;		      (empty? solucao) 
				;		      (list (bin-dec (first list-rotacoes)))
				;		      (append solucao (list (bin-dec (first list-rotacoes))))) 
				;          (drop-right pendentes 1)  
				;          tamanho)
				;	#t	
				;	(rotate-seguro solucao pendentes tamanho (rest list-rotacoes) )
				;)
				(or (core (if 
						      (empty? solucao) 
						      (list (bin-dec (first list-rotacoes)))
						      (append solucao (list (bin-dec (first list-rotacoes))))) 
				          (drop-right pendentes 1)  
				          tamanho)
					(rotate-seguro solucao pendentes tamanho (rest list-rotacoes) "back")
				)
			)
			(else (rotate-seguro solucao pendentes tamanho (rest list-rotacoes) "A"))
		)
	)
	(define (exibe-solucao solucao )
		(escrever-jogo-resolvido solucao)
		solucao
	)
	(define (core solucao candidatos pendentes tamanho)
		(escrever-jogo-resolvido (list #t solucao tamanho))
		(cond 
			((empty? pendentes) (exibe-solucao(list #t solucao tamanho))); retorna true
			((empty? candidatos) #f); retorna false
			(else
				(if (seguro? (bin-dec (first candidatos)) solucao tamanho)  
					(or (core 
							(if (empty? solucao) 
						        (list (bin-dec (first candidatos)))
						        (append solucao (list (bin-dec (first candidatos))))) 
							(gera-rotacoes (last pendentes))
							(drop-right pendentes 1)  
				            tamanho)
						)
						(core solucao  (rest candidatos) pendentes  tamanho)
					)
					(core solucao (rest candidatos) pendentes  tamanho)
			)
		)
			;((rotate-seguro solucao pendentes tamanho (gera-rotacoes (dec-bin(last pendentes))) "Init") )
	)
	
	(core  empty (gera-rotacoes (last pendentes)) (drop-right pendentes) tamanho)
	;(core  empty (last lido) (drop-right (last lido) 1)  (first lido))
	;(core  empty (bilist-unilist(last lido)) (first lido))
)



;; List String -> void
;; Esta é a função principal. Esta função é chamada a partir do arquivo
;; infinity-main.rkt
;;
;; args é a lista de parâmetros para o programa.
;;
;; O primeiro e único parâmetro deve ser o nome (caminho) do arquivo que contém 
;; o jogo a ser resolvido. O jogo é representado na forma de caracteres, o qual
;; deverá ser primeiramente convertido para a representação numérica antes de
;; ser resolvido. Veja exemplos de arquivos no diretório de testes.
;;
;; A saída desta função é a escrita na tela do jogo resolvido, representado na
;; forma de caracteres. Caso o jogo não possua solução, nada deve ser escrito na
;; tela.

;;eof-object?

(define (main args)
	(display args)
	(define (separa-param retorno) 
		(resolver (first retorno) (last retorno))
	)
	(separa-param (ler-jogo args))
)
(main "../testes/casos/01.txt")
(main "../testes/casos/02.txt")
(main "../testes/casos/03.txt")
(main "../testes/casos/04.txt")
(main "../testes/casos/05.txt")
(main "../testes/casos/06.txt")
(main "../testes/casos/07.txt")
(main "../testes/casos/08.txt")
(main "../testes/casos/erro.txt")
(main "../testes/casos/09.txt")
;(main "../testes/casos/10.txt")
;(main "../testes/casos/11.txt")
;(main "../testes/casos/12.txt")
;(main "../testes/casos/13.txt")
;(main "../testes/casos/14.txt")
;(main "../testes/casos/15.txt")
;(main "../testes/casos/16.txt")
;(main "../testes/casos/17.txt")
;(main "../testes/casos/18.txt")
;(main "../testes/casos/19.txt")
;(main "../testes/casos/20.txt")
;(main "../testes/casos/aleatorio_10x10_curvas.txt")
;(main "../testes/casos/aleatorio_10x10_tudo.txt")
;(main "../testes/casos/aleatorio_30x30_curvas.txt")
;(main "../testes/casos/aleatorio_30x30_tudo.txt")
;(main "../testes/casos/aleatorio_50x50_curvas.txt")
;main "../testes/casos/aleatorio_50x50_tudo.txt")
